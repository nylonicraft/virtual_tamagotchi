const api = 'http://localhost:8000';
let userId = ''; // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∞–º–∞–≥–æ—á—ñ
async function createNewTamagochi(event) {
  event.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏

  const newUserId = document.getElementById('new-user-id').value.trim();
  const tamagochiName = document.getElementById('new-tamagochi-name').value.trim();

  if (!newUserId || !tamagochiName) {
    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å UID —Ç–∞ —ñ–º\'—è —Ç–∞–º–∞–≥–æ—á—ñ.');
    return;
  }

  try {
    const res = await fetch(`${api}/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: newUserId, name: tamagochiName }),
    });

    if (!res.ok) {
      throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–º–∞–≥–æ—á—ñ.');
    }

    const data = await res.json();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —ñ–º'—è —Ç–∞–º–∞–≥–æ—á—ñ
    if (data.message.includes(tamagochiName)) {
      alert(data.message); // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞

      userId = newUserId;
      document.getElementById('tamagochi-name').innerText = `–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${tamagochiName}`;
      document.getElementById('user-id-modal').style.display = 'none'; // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    } else {
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–º–∞–≥–æ—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  } catch (error) {
    console.error('Error creating tamagochi:', error);
    alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–º–∞–≥–æ—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
}

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–∞–º–∞–≥–æ—á—ñ
async function returnToExistingTamagochi(event) {
  event.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏

  const existingUserId = document.getElementById('existing-user-id').value.trim();

  if (!existingUserId) {
    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å UID.');
    return;
  }

  try {
    const res = await fetch(`${api}/status/${existingUserId}`);
    if (!res.ok) throw new Error('–¢–∞–º–∞–≥–æ—á—ñ –∑ —Ç–∞–∫–∏–º UID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');

    const data = await res.json();
    userId = existingUserId;
    document.getElementById('tamagochi-name').innerText = `–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${data.state.name}`;
    document.getElementById('user-id-modal').style.display = 'none';
    alert('–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ —Å–≤–æ–≥–æ —Ç–∞–º–∞–≥–æ—á—ñ!');
  } catch (error) {
    console.error('Error returning to tamagochi:', error);
    alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–º–∞–≥–æ—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π (feed/play)
async function performAction(endpoint, successMessage) {
  try {
    const res = await fetch(`${api}/${endpoint}/${userId}`, { method: 'POST' });
    const data = await res.json();
    alert(successMessage || data.message);
    await updateStatusAndFeelings(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ –µ–º–æ—Ü—ñ—ó
  } catch (error) {
    console.error(`Error performing action: ${endpoint}`, error);
    alert('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≥–æ–¥—É–≤–∞–Ω–Ω—è
function feed() {
  performAction('feed', '–¢–∞–º–∞–≥–æ—á—ñ –Ω–∞–≥–æ–¥–æ–≤–∞–Ω–æ!');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥—Ä–∏
function play() {
  performAction('play', '–¢–∞–º–∞–≥–æ—á—ñ –ø–æ–≥—Ä–∞–≤!');
}

async function updateStatusAndFeelings() {
  try {
    if (!userId) {
      console.error('userId –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–∞–º–∞–≥–æ—á—ñ.');
      return;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    const statusRes = await fetch(`${api}/status/${userId}`);
    if (!statusRes.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${statusRes.status}`);
    }
    const statusData = await statusRes.json();
    document.getElementById('status').innerText = 
      `–°–∏—Ç—ñ—Å—Ç—å: ${statusData.state.satiety}, –©–∞—Å—Ç—è: ${statusData.state.happiness}`;

    // –û–Ω–æ–≤–ª—é—î–º–æ –µ–º–æ—Ü—ñ—ó
    const feelingsRes = await fetch(`${api}/feelings/${userId}`);
    if (!feelingsRes.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${feelingsRes.status}`);
    }
    const feelingsData = await feelingsRes.json();
    const emotionDiv = document.getElementById('emotion');

    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ–∫—Å—Ç —ñ –∫–ª–∞—Å–∏
    emotionDiv.classList.remove('happy', 'sad');

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const { hungry, bored, happy } = feelingsData.feelings;
    let emotionMessage = "";

    if (hungry) {
      emotionMessage = "–Ø –≥–æ–ª–æ–¥–Ω–∏–π! üò¢";
      emotionDiv.classList.add('sad');
    } else if (bored) {
      emotionMessage = "–ú–µ–Ω—ñ –Ω—É–¥–Ω–æ... üòû";
      emotionDiv.classList.add('sad');
    } else if (happy) {
      emotionMessage = "–Ø —â–∞—Å–ª–∏–≤–∏–π! üòä";
      emotionDiv.classList.add('happy');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ DOM
    emotionDiv.innerText = emotionMessage;
  } catch (error) {
    console.error('Error updating status or feelings', error);
    alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–±–æ –µ–º–æ—Ü—ñ—ó.');
  }
}